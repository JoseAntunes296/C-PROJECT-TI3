@model IEnumerable<Project.Models.project>

@{
    ViewBag.Title = "Meus Projetos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section styles {
    <style>
        .custom-swal {
            background-color: #222831 !important;
            color: white !important;
        }

        .swal2-confirm {
            color: white !important;
            background-color: #1f2029 !important;
            border-radius: 1rem !important;
        }

            .swal2-confirm:hover {
                opacity: 0.8 !important;
                background-color: #222831 !important;
                color: white !important;
                transition: 0.3s !important;
                border-radius: 1rem !important;
            }

        tbody tr {
            opacity: 0.6;
        }

        .table-container {
            display: inline-block;
        }

        tbody tr:hover {
            opacity: 1;
        }

        .hoverView {
            opacity: 0.8;
            background-color: #222831;
            color: white;
            transition: 0.3s;
            border-radius: 2rem;
        }

            .hoverView:hover {
                opacity: 1.2;
                color: white;
                border-color: #225841;
            }

        .table-responsive {
            overflow-x: auto;
        }
    </style>
}

@if (Model is null)
{
    <p style="color:white">Não estás em nenhum projeto.</p>
}
else
{
    <div class="text-center mt-3">
        <div class="table-responsive">
            <table class="table table-striped" style="background-color: #222831;color:white;">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Projeto</th>
                        <th>Detalhes</th>
                        <th>Começou em:</th>
                        <th>Acaba em:</th>
                        <th>Status</th>
                        <th>Detalhes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var projectDetails in Model)
                    {
                        DateTime dataAtual = DateTime.Now;
                        int comparacao = DateTime.Compare(projectDetails.endDate, dataAtual.Date);
                        string resultado = (comparacao > 0) ? "Em Progresso" : "Finalizado";
                        string classeCss = (resultado == "Finalizado") ? "danger" : "warning";
                        <tr>
                            <td>@projectDetails.IdProject</td>
                            <td>
                                @projectDetails.name
                                <button class="btn btn-link btn-sm ml-2" data-toggle="collapse" data-target="#project-@projectDetails.IdProject-Tasks"
                                        onclick="toggleAccordionIcon(this, @projectDetails.IdProject)">
                                    <ion-icon id="project-@projectDetails.IdProject-Icon" name="chevron-down-outline"></ion-icon>
                                </button>
                            </td>
                            <td>@projectDetails.description</td>
                            <td>@projectDetails.startDate.ToShortDateString()</td>
                            <td>@projectDetails.endDate.ToShortDateString()</td>
                            <td><span class="badge badge-@classeCss">@resultado</span></td>
                            <td>
                                <button class="btn" style="color: white;" data-toggle="modal" data-target="#abandonProjectModal" data-project-id="@projectDetails.IdProject">
                                    <ion-icon size="large" name="add-circle-outline"></ion-icon>
                                </button>
                            </td>
                        </tr>
                        <tr id="project-@projectDetails.IdProject-Tasks" class="collapse">
                            <td colspan="7">
                                <table class="table" style="background-color: #1f2029; color: white;">
                                    <thead>
                                        <tr>
                                            <th>Nome da Tarefa</th>
                                            <th>Detalhes</th>
                                            <th>Data de Término</th>
                                            <th>Estado</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var task in projectDetails.tasks)
                                        {
                                            int status;
                                            bool isNumeric = int.TryParse(task.status, out status);
                                            var teste = isNumeric && status > 0 ? "Ativo" : "Inativo";

                                            bool isTaskAvailable = task.UserTaskId == null || task.UserTaskId == Convert.ToInt32(Session["idUser"]);

                                            if (isTaskAvailable)
                                            {
                                                <tr>
                                                    <td>@task.name</td>
                                                    <td>@task.description</td>
                                                    <td>@task.deadline.ToShortDateString()</td>
                                                    <td>@teste</td>
                                                    <td>
                                                        <button class="btn" style="color: white;" data-toggle="modal" data-target="#showTaskModal" data-task-id="@task.IdTask">
                                                            <ion-icon size="large" name="add-circle-outline"></ion-icon>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div>
            <a href="/Home/Index" class="btn hoverView" style="background-color: #222831;color:white; ">Go Back</a>
        </div>
    </div>
}
<div class="modal fade" id="abandonProjectModal" tabindex="-1" role="dialog" aria-labelledby="abandonProjectModalLabel" aria-hidden="true" style="background-color: #1f2029;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content" style="background-color: #1f2029; color:white;">
            <div class="modal-header">
                <h5 class="modal-title" id="abandonProjectModalLabel">Detalhes do Projeto</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" style="color:white">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="abandonProjectName">Nome do Projeto</label>
                        <input type="text" class="form-control" id="abandonProjectName" placeholder="Nome do Projeto" disabled>
                    </div>
                    <div class="form-group">
                        <label for="abandonProjectDescription">Descrição</label>
                        <textarea class="form-control" id="abandonProjectDescription" placeholder="Descrição" disabled></textarea>
                    </div>
                    <div class="form-group">
                        <label for="abandonProjectStartDate">Data de Início</label>
                        <input type="date" class="form-control" id="abandonProjectStartDate" disabled>
                    </div>
                    <div class="form-group">
                        <label for="abandonProjectEndDate">Data de Término</label>
                        <input type="date" class="form-control" id="abandonProjectEndDate" disabled>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn hoverView" style="background-color: #1f2029; color: white; " data-dismiss="modal">Fechar</button>
                <button class="btn hoverView" style="background-color: #1f2029; color: white; " id="abandonProjectButton">Abandonar Projeto</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="showTaskModal" tabindex="-1" role="dialog" aria-labelledby="showTaskModalLabel" aria-hidden="true" style="background-color: #1f2029;">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content" style="background-color: #1f2029; color: white;">
            <div class="modal-header">
                <h5 class="modal-title" id="showTaskModalLabel">Detalhes da Tarefa</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="taskName">Nome da Tarefa</label>
                        <input type="text" class="form-control" id="taskName" placeholder="Nome da Tarefa" disabled>
                    </div>
                    <div class="form-group">
                        <label for="taskDescription">Descrição</label>
                        <textarea class="form-control" id="taskDescription" placeholder="Descrição" disabled></textarea>
                    </div>
                    <div class="form-group">
                        <label for="taskStatus">Status</label>
                        <select class="form-control" id="taskStatus">
                            <option value="0">Em andamento</option>
                            <option value="1">Concluído</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="taskDeadline">Data de Término</label>
                        <input type="date" class="form-control" id="taskDeadline" disabled>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn hoverView" style="background-color: #1f2029; color: white; " data-dismiss="modal">Fechar</button>
                <button class="btn hoverView" style="background-color: #1f2029; color: white; " data-dismiss="modal" id="abandonOrTakeTaskButton">Abandonar Tarefa</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

@section scripts{
    <script>
    $(document).ready(function () {
        $('#abandonProjectModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var projectId = button.data('project-id');
            var userId = "@Session["IdUser"]";

            $.ajax({
                url: '/AdminPanel/GetProject',
                type: 'POST',
                data: { projectId: projectId },
                success: function (response) {
                    const startDate = new Date(parseInt(response.startDate.replace("/Date(", "").replace(")/", "")));
                    const endDate = new Date(parseInt(response.endDate.replace("/Date(", "").replace(")/", "")));

                    const formattedStartDate = formatDate(startDate);
                    const formattedEndDate = formatDate(endDate);

                    $('#abandonProjectName').val(response.name);
                    $('#abandonProjectDescription').val(response.description);
                    $('#abandonProjectStartDate').val(formattedStartDate);
                    $('#abandonProjectEndDate').val(formattedEndDate);

                    $('#abandonProjectButton').on('click', function () {
                        $.ajax({
                            url: '/AdminPanel/abandonProjeto',
                            type: 'POST',
                            data: {
                                projectId: projectId,
                                userId: userId
                            },
                            success: function (response) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Projeto abandonado com sucesso',
                                    customClass: 'custom-swal',
                                    text: response.message
                                }).then(function () {
                                    location.reload();
                                });
                            },
                            error: function (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Erro ao abandonar o projeto',
                                    customClass: 'custom-swal',
                                    text: 'Ocorreu um erro ao abandonar o projeto. Por favor, tente novamente.'
                                });
                            }
                        });
                    });
                },
                error: function (error) {
                    console.log(error);
                }
            });
        });
    });
$(document).ready(function() {
  $('#showTaskModal').on('show.bs.modal', function(event) {
    var button = $(event.relatedTarget);
    var taskId = button.data('task-id');
    var userId = "@Session["IdUser"]";

    $.ajax({
      url: '/AdminPanel/GetUserTask',
      type: 'POST',
      data: {
        taskId: taskId
      },
        success: function (response) {
            const deadline = new Date(parseInt(response.deadline.replace("/Date(", "").replace(")/", "")));

            const formattedDeadline = formatDate(deadline);
        $('#taskName').val(response.name);
        $('#taskDescription').val(response.description);
            $('#taskDeadline').val(formattedDeadline);
        var userHasTask = response.userHasTask;
        var abandonOrTakeTaskButton = $('#abandonOrTakeTaskButton');
        var taskStatusSelect = $('#taskStatus');

          if (userHasTask) {
              abandonOrTakeTaskButton.text('Abandonar Tarefa');
              abandonOrTakeTaskButton.removeClass('btn-success').addClass('btn-danger');
              taskStatusSelect.prop('disabled', false);
          } else {
              abandonOrTakeTaskButton.text('Pegar Tarefa');
              abandonOrTakeTaskButton.removeClass('btn-danger').addClass('btn-success');
              taskStatusSelect.prop('disabled', true);
          }

        abandonOrTakeTaskButton.off('click').on('click', function() {
          if (userHasTask) {
            abandonTask(taskId, userId);
          } else {
            takeTask(taskId, userId);
          }
        });
          $('#completeTaskButton').off('click').on('click', function () {
              var selectedStatus = taskStatusSelect.val();
              completeTask(taskId, userId, selectedStatus);
          });
      },
      error: function(error) {
        console.log(error);
      }
    });
  });
});
function completeTask(taskId, userId, newStatus) {
    $.ajax({
        url: '/AdminPanel/CompleteTask',
        type: 'POST',
        data: {
            taskId: taskId,
            userId: userId,
            newStatus: newStatus
        },
        success: function (response) {
            if (response.success) {
                // Tarefa concluída com sucesso
                Swal.fire({
                    title: 'Sucesso',
                    text: response.message,
                    icon: 'success',
                    customClass: 'custom-swal',
                    confirmButtonText: 'OK'
                }).then(function () {
                    location.reload()
                });
            } else {
                // Erro ao concluir a tarefa
                Swal.fire({
                    title: 'Erro',
                    text: response.message,
                    icon: 'error',
                    customClass: 'custom-swal',
                    confirmButtonText: 'OK'
                }).then(function () {
                    location.reload()
                });
            }
        },
        error: function (error) {
            Swal.fire({
                title: 'Erro',
                text: error,
                icon: 'error',
                customClass: 'custom-swal',
                confirmButtonText: 'OK'
            }).then(function () {
                location.reload()
            });
        }
    });
}
function abandonTask(taskId, userId) {
  $.ajax({
    url: '/AdminPanel/abandonTask',
    type: 'POST',
    data: {
      taskId: taskId,
      userId: userId
    },
    success: function(response) {
      Swal.fire({
        icon: 'success',
        title: 'Tarefa abandonada com sucesso!',
          customClass: 'custom-swal'
      }).then(function() {
          location.reload();
      });
    },
    error: function(error) {
      Swal.fire({
        icon: 'error',
        title: 'Erro ao abandonar a tarefa',
          customClass: 'custom-swal',
        text: error.responseText
      }).then(function() {
          location.reload();
      });
    }
  });
}

function takeTask(taskId, userId) {
  $.ajax({
    url: '/AdminPanel/takeTask',
    type: 'POST',
    data: {
      taskId: taskId,
      userId: userId
    },
    success: function(response) {
      Swal.fire({
        icon: 'success',
          title: 'Tarefa atribuída com sucesso!',
          customClass: 'custom-swal'

      }).then(function() {
          location.reload();
      });
    },
    error: function(error) {
      // Exibir SweetAlert de erro
      Swal.fire({
        icon: 'error',
        title: 'Erro ao atribuir a tarefa',
          text: error.responseText,
          customClass: 'custom-swal'

      }).then(function () {
          location.reload();
      });
    }
  });
}

        function toggleAccordionIcon(button, projectId) {
            const icon = button.querySelector('ion-icon');
            const iconId = icon.getAttribute('id');

            if (iconId === `project-${projectId}-Icon`) {
                icon.setAttribute('name', 'chevron-up-outline');
                icon.setAttribute('id', `project-${projectId}-IconUp`);
            } else if (iconId === `project-${projectId}-IconUp`) {
                icon.setAttribute('name', 'chevron-down-outline');
                icon.setAttribute('id', `project-${projectId}-Icon`);
            }

            // Fechar as outras dropdowns
            const collapseElements = document.querySelectorAll('[id^="project-"][id$="-Tasks"]');
            collapseElements.forEach((element) => {
                const elementId = element.getAttribute('id');
                if (elementId !== `project-${projectId}-Tasks`) {
                    element.classList.remove('show');
                    const icon = document.querySelector(`[id="${elementId.replace('Tasks', 'IconUp')}"]`);
                    if (icon) {
                        icon.setAttribute('name', 'chevron-down-outline');
                        icon.setAttribute('id', elementId.replace('Tasks', 'Icon'));
                    }
                }
            });
        }
        function formatDate(date) {
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');

            return `${year}-${month}-${day}`;
        }
    </script>
}